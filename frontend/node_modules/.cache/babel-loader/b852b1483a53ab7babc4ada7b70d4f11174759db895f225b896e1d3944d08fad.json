{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Owner\\\\Desktop\\\\Spotify-Playlist-Generator\\\\frontend\\\\src\\\\Dashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Dashboard() {\n  _s();\n  const [accessToken, setAccessToken] = useState('');\n  const [refreshToken, setRefreshToken] = useState('');\n  const [playlists, setPlaylists] = useState([]);\n  const [likedSongs, setLikedSongs] = useState([]);\n  const [showSidebar, setShowSidebar] = useState(false); // Fix 1 - Added this\n  const [selectedPlaylistName, setSelectedPlaylistName] = useState('');\n  const [nextLikedSongsUrl, setNextLikedSongsUrl] = useState('');\n  const [nextPlaylistSongsUrl, setNextPlaylistSongsUrl] = useState('');\n\n  // Extract tokens from URL or LocalStorage\n  useEffect(() => {\n    const params = new URLSearchParams(window.location.search);\n    const access_token = params.get('access_token') || localStorage.getItem('spotify_access_token');\n    const refresh_token = params.get('refresh_token') || localStorage.getItem('spotify_refresh_token');\n    if (access_token && refresh_token) {\n      setAccessToken(access_token);\n      setRefreshToken(refresh_token);\n\n      // Save tokens for future use\n      localStorage.setItem('spotify_access_token', access_token);\n      localStorage.setItem('spotify_refresh_token', refresh_token);\n    }\n  }, []);\n\n  // Fetch playlists\n  useEffect(() => {\n    if (!accessToken) return;\n    const fetchPlaylists = async () => {\n      try {\n        const response = await fetch('https://api.spotify.com/v1/me/playlists', {\n          headers: {\n            Authorization: `Bearer ${accessToken}`\n          }\n        });\n        const data = await response.json();\n\n        // Add \"Liked Songs\" as the first fake playlist\n        const likedSongsPlaceholder = {\n          id: 'liked-songs',\n          name: '❤️ Liked Songs'\n        };\n        const allPlaylists = [likedSongsPlaceholder, ...(data.items || [])];\n        setPlaylists(allPlaylists);\n      } catch (error) {\n        console.error('Error fetching playlists:', error);\n      }\n    };\n    fetchPlaylists();\n  }, [accessToken]);\n\n  // Fetch all liked songs (with pagination)\n  const fetchLikedSongs = async () => {\n    setSelectedPlaylistName('❤️ Liked Songs');\n    setShowSidebar(true);\n    setLikedSongs([]); // Clear any old songs\n\n    try {\n      const response = await fetch('https://api.spotify.com/v1/me/tracks', {\n        headers: {\n          Authorization: `Bearer ${accessToken}`\n        }\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      setLikedSongs(data.items); // Show the first 50 songs\n      setNextLikedSongsUrl(data.next); // Save the next page URL for later\n    } catch (error) {\n      console.error('Error fetching liked songs:', error);\n      alert('Failed to fetch liked songs. Please try again.');\n    }\n  };\n  const loadMoreLikedSongs = async () => {\n    if (!nextLikedSongsUrl) return; // No more pages\n\n    try {\n      const response = await fetch(nextLikedSongsUrl, {\n        headers: {\n          Authorization: `Bearer ${accessToken}`\n        }\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      setLikedSongs(prevSongs => [...prevSongs, ...data.items]); // Add new songs to list\n      setNextLikedSongsUrl(data.next); // Update next page URL (or null if no more)\n    } catch (error) {\n      console.error('Error fetching more liked songs:', error);\n      alert('Failed to load more liked songs. Please try again.');\n    }\n  };\n  const fetchPlaylistSongs = async playlist => {\n    setSelectedPlaylistName(playlist.name); // Playlist has an id and a name\n    setShowSidebar(true); // this is what we use to show the sidebar, can change to a generic name that works for both palylists and likedsongs\n    setLikedSongs([]); // Same as above, list of songs that will be showing, we are clearing it\n    setNextPlaylistSongsUrl(''); // Clear any old next URL\n\n    try {\n      const firstPageUrl = `https://api.spotify.com/v1/playlists/${playlist.id}/tracks`;\n      const response = await fetch(firstPageUrl, {\n        headers: {\n          Authorization: `Bearer ${accessToken}`\n        }\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      setLikedSongs(data.items);\n      setNextPlaylistSongsUrl(data.next);\n    } catch (error) {\n      console.error('Error fetching playlist songs:', error);\n      alert('Failed to fetch playlist songs. Please try again.');\n    }\n  };\n  const loadMorePlaylistSongs = async () => {\n    if (!nextPlaylistSongsUrl) return;\n    try {\n      const response = await fetch(nextPlaylistSongsUrl, {\n        headers: {\n          Authorization: `Bearer ${accessToken}`\n        }\n      });\n      const data = await response.json();\n      setLikedSongs(prevSongs => [...prevSongs, ...data.items]); // Append new songs\n      setNextPlaylistSongsUrl(data.next); // Update next page URL\n    } catch (error) {\n      console.error('Error fetching more songs for playlist:', error);\n    }\n  };\n  const handlePlaylistClick = playlist => {\n    if (playlist.id === 'liked-songs') {\n      fetchLikedSongs();\n    } else {\n      fetchPlaylistSongs(playlist);\n    }\n  };\n  const handleScroll = event => {\n    const {\n      scrollTop,\n      scrollHeight,\n      clientHeight\n    } = event.target;\n    if (scrollTop + clientHeight >= scrollHeight - 5) {\n      // If viewing Liked Songs, load more liked songs\n      if (selectedPlaylistName === '❤️ Liked Songs') {\n        loadMoreLikedSongs();\n      } else {\n        loadMorePlaylistSongs();\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: 'flex'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        flex: 1,\n        padding: '20px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Spotify Dashboard\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Access Token: \", accessToken]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Refresh Token: \", refreshToken]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Your Playlists\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        style: {\n          listStyleType: 'none',\n          padding: 0\n        },\n        children: playlists.map(playlist => /*#__PURE__*/_jsxDEV(\"li\", {\n          onClick: () => handlePlaylistClick(playlist),\n          style: {\n            cursor: 'pointer',\n            padding: '8px',\n            border: '1px solid #ccc',\n            marginBottom: '5px'\n          },\n          children: playlist.name\n        }, playlist.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 13\n    }, this), showSidebar && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: '300px',\n        padding: '20px',\n        borderLeft: '1px solid #ccc',\n        backgroundColor: '#f9f9f9'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: selectedPlaylistName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setShowSidebar(false),\n        children: \"Close\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          height: '400px',\n          overflowY: 'auto',\n          border: '1px solid #ddd'\n        },\n        onScroll: handleScroll,\n        children: /*#__PURE__*/_jsxDEV(\"ul\", {\n          style: {\n            listStyleType: 'none',\n            padding: 0\n          },\n          children: likedSongs.map(song => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [song.track.name, \" - \", song.track.artists.map(a => a.name).join(', ')]\n          }, song.track.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 217,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 168,\n    columnNumber: 9\n  }, this);\n}\n_s(Dashboard, \"zqpu3aiIvMZT7ZHPnvrJeyICICY=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","Dashboard","_s","accessToken","setAccessToken","refreshToken","setRefreshToken","playlists","setPlaylists","likedSongs","setLikedSongs","showSidebar","setShowSidebar","selectedPlaylistName","setSelectedPlaylistName","nextLikedSongsUrl","setNextLikedSongsUrl","nextPlaylistSongsUrl","setNextPlaylistSongsUrl","params","URLSearchParams","window","location","search","access_token","get","localStorage","getItem","refresh_token","setItem","fetchPlaylists","response","fetch","headers","Authorization","data","json","likedSongsPlaceholder","id","name","allPlaylists","items","error","console","fetchLikedSongs","ok","Error","status","next","alert","loadMoreLikedSongs","prevSongs","fetchPlaylistSongs","playlist","firstPageUrl","loadMorePlaylistSongs","handlePlaylistClick","handleScroll","event","scrollTop","scrollHeight","clientHeight","target","style","display","children","flex","padding","fileName","_jsxFileName","lineNumber","columnNumber","listStyleType","map","onClick","cursor","border","marginBottom","width","borderLeft","backgroundColor","height","overflowY","onScroll","song","track","artists","a","join","_c","$RefreshReg$"],"sources":["C:/Users/Owner/Desktop/Spotify-Playlist-Generator/frontend/src/Dashboard.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\n\r\nfunction Dashboard() {\r\n    const [accessToken, setAccessToken] = useState('');\r\n    const [refreshToken, setRefreshToken] = useState('');\r\n    const [playlists, setPlaylists] = useState([]);\r\n    const [likedSongs, setLikedSongs] = useState([]);\r\n    const [showSidebar, setShowSidebar] = useState(false);  // Fix 1 - Added this\r\n    const [selectedPlaylistName, setSelectedPlaylistName] = useState('');\r\n    const [nextLikedSongsUrl, setNextLikedSongsUrl] = useState('');\r\n    const [nextPlaylistSongsUrl, setNextPlaylistSongsUrl] = useState('');\r\n\r\n\r\n    // Extract tokens from URL or LocalStorage\r\n    useEffect(() => {\r\n        const params = new URLSearchParams(window.location.search);\r\n        const access_token = params.get('access_token') || localStorage.getItem('spotify_access_token');\r\n        const refresh_token = params.get('refresh_token') || localStorage.getItem('spotify_refresh_token');\r\n\r\n        if (access_token && refresh_token) {\r\n            setAccessToken(access_token);\r\n            setRefreshToken(refresh_token);\r\n\r\n            // Save tokens for future use\r\n            localStorage.setItem('spotify_access_token', access_token);\r\n            localStorage.setItem('spotify_refresh_token', refresh_token);\r\n        }\r\n    }, []);\r\n\r\n    // Fetch playlists\r\n    useEffect(() => {\r\n        if (!accessToken) return;\r\n\r\n        const fetchPlaylists = async () => {\r\n            try {\r\n                const response = await fetch('https://api.spotify.com/v1/me/playlists', {\r\n                    headers: { Authorization: `Bearer ${accessToken}` }\r\n                });\r\n                const data = await response.json();\r\n\r\n                // Add \"Liked Songs\" as the first fake playlist\r\n                const likedSongsPlaceholder = { id: 'liked-songs', name: '❤️ Liked Songs' };\r\n                const allPlaylists = [likedSongsPlaceholder, ...(data.items || [])];\r\n\r\n                setPlaylists(allPlaylists);\r\n            } catch (error) {\r\n                console.error('Error fetching playlists:', error);\r\n            }\r\n        };\r\n\r\n        fetchPlaylists();\r\n    }, [accessToken]);\r\n\r\n\r\n    // Fetch all liked songs (with pagination)\r\n    const fetchLikedSongs = async () => {\r\n        setSelectedPlaylistName('❤️ Liked Songs');\r\n        setShowSidebar(true);\r\n        setLikedSongs([]);   // Clear any old songs\r\n    \r\n        try {\r\n            const response = await fetch('https://api.spotify.com/v1/me/tracks', {\r\n                headers: { Authorization: `Bearer ${accessToken}` }\r\n            });\r\n    \r\n            if (!response.ok) {\r\n                throw new Error(`HTTP error! status: ${response.status}`);\r\n            }\r\n    \r\n            const data = await response.json();\r\n    \r\n            setLikedSongs(data.items);  // Show the first 50 songs\r\n            setNextLikedSongsUrl(data.next);  // Save the next page URL for later\r\n        } catch (error) {\r\n            console.error('Error fetching liked songs:', error);\r\n            alert('Failed to fetch liked songs. Please try again.');\r\n        }\r\n    };\r\n\r\n    const loadMoreLikedSongs = async () => {\r\n        if (!nextLikedSongsUrl) return;  // No more pages\r\n    \r\n        try {\r\n            const response = await fetch(nextLikedSongsUrl, {\r\n                headers: { Authorization: `Bearer ${accessToken}` }\r\n            });\r\n    \r\n            if (!response.ok) {\r\n                throw new Error(`HTTP error! status: ${response.status}`);\r\n            }\r\n    \r\n            const data = await response.json();\r\n    \r\n            setLikedSongs((prevSongs) => [...prevSongs, ...data.items]);  // Add new songs to list\r\n            setNextLikedSongsUrl(data.next);  // Update next page URL (or null if no more)\r\n        } catch (error) {\r\n            console.error('Error fetching more liked songs:', error);\r\n            alert('Failed to load more liked songs. Please try again.');\r\n        }\r\n    };\r\n    \r\n\r\n    const fetchPlaylistSongs = async(playlist) => {\r\n        setSelectedPlaylistName(playlist.name); // Playlist has an id and a name\r\n        setShowSidebar(true); // this is what we use to show the sidebar, can change to a generic name that works for both palylists and likedsongs\r\n        setLikedSongs([]);  // Same as above, list of songs that will be showing, we are clearing it\r\n        setNextPlaylistSongsUrl('');  // Clear any old next URL\r\n        \r\n        try {\r\n            const firstPageUrl = `https://api.spotify.com/v1/playlists/${playlist.id}/tracks`;\r\n\r\n            const response = await fetch(firstPageUrl, {\r\n                headers: { Authorization: `Bearer ${accessToken}` }\r\n            });\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`HTTP error! status: ${response.status}`);\r\n            }\r\n\r\n            const data = await response.json();\r\n            setLikedSongs(data.items);\r\n            setNextPlaylistSongsUrl(data.next);\r\n        } catch (error) {\r\n            console.error('Error fetching playlist songs:', error);\r\n            alert('Failed to fetch playlist songs. Please try again.');\r\n        }\r\n    }\r\n\r\n    const loadMorePlaylistSongs = async () => {\r\n        if (!nextPlaylistSongsUrl) return;\r\n    \r\n        try {\r\n            const response = await fetch(nextPlaylistSongsUrl, {\r\n                headers: { Authorization: `Bearer ${accessToken}` }\r\n            });\r\n    \r\n            const data = await response.json();\r\n    \r\n            setLikedSongs((prevSongs) => [...prevSongs, ...data.items]); // Append new songs\r\n            setNextPlaylistSongsUrl(data.next); // Update next page URL\r\n        } catch (error) {\r\n            console.error('Error fetching more songs for playlist:', error);\r\n        }\r\n    };\r\n    \r\n\r\n    const handlePlaylistClick = (playlist) => {\r\n        if (playlist.id === 'liked-songs') {\r\n            fetchLikedSongs();\r\n        } else {\r\n            fetchPlaylistSongs(playlist);\r\n        }\r\n    };\r\n    const handleScroll = (event) => {\r\n        const { scrollTop, scrollHeight, clientHeight } = event.target;\r\n    \r\n        if (scrollTop + clientHeight >= scrollHeight - 5) {\r\n            // If viewing Liked Songs, load more liked songs\r\n            if (selectedPlaylistName === '❤️ Liked Songs') {\r\n                loadMoreLikedSongs();\r\n            } else {\r\n                loadMorePlaylistSongs();\r\n            }\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div style={{ display: 'flex' }}>\r\n            {/* Main content (left side) */}\r\n            <div style={{ flex: 1, padding: '20px' }}>\r\n                <h1>Spotify Dashboard</h1>\r\n                <p>Access Token: {accessToken}</p>\r\n                <p>Refresh Token: {refreshToken}</p>\r\n\r\n                <h2>Your Playlists</h2>\r\n                <ul style={{ listStyleType: 'none', padding: 0 }}>\r\n                    {playlists.map((playlist) => (\r\n                        <li \r\n                            key={playlist.id}\r\n                            onClick={() => handlePlaylistClick(playlist)}\r\n                            style={{\r\n                                cursor: 'pointer',\r\n                                padding: '8px',\r\n                                border: '1px solid #ccc',\r\n                                marginBottom: '5px'\r\n                            }}\r\n                        >\r\n                            {playlist.name}\r\n                        </li>\r\n                    ))}\r\n                </ul>\r\n            </div>\r\n\r\n            {/* Sidebar (right side) - shows liked songs only when needed */}\r\n            {showSidebar && (\r\n            <div style={{\r\n                width: '300px',\r\n                padding: '20px',\r\n                borderLeft: '1px solid #ccc',\r\n                backgroundColor: '#f9f9f9'\r\n            }}>\r\n                <h2>{selectedPlaylistName}</h2>\r\n\r\n                <button onClick={() => setShowSidebar(false)}>Close</button>\r\n                \r\n                {/* Scrollable liked songs list */}\r\n                <div \r\n                    style={{ \r\n                        height: '400px', \r\n                        overflowY: 'auto', \r\n                        border: '1px solid #ddd' \r\n                    }} \r\n                    onScroll={handleScroll}\r\n                >\r\n                    <ul style={{ listStyleType: 'none', padding: 0 }}>\r\n                        {likedSongs.map((song) => (\r\n                            <li key={song.track.id}>\r\n                                {song.track.name} - {song.track.artists.map(a => a.name).join(', ')}\r\n                            </li>\r\n                        ))}\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        )}\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Dashboard;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}